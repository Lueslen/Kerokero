1. CRIE UM CODIGO QUE APRESENTE UMA HERANÇA.

public class Produto {
  public double valorCompra;
  protected double valorVenda;
}

public class Computador extends Produto {
  private String processador;
}


2. CRIE UM CODIGO QUE APRESENTE UMA IMPLEMENTAÇÃO DE INTERFACE.

interface Animal {
  public void animalSound();
  public void sleep();
}

class Pig implements Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
  
  public void sleep() {
    System.out.println("Zzz");
  }
  
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig();
    myPig.animalSound();
    myPig.sleep();
  }
  
}


3. CRIE UM CODIGO QUE APRESENTE UMA SOBRECARGA DE MÉTODO.

public class calculadora{
 public int calcula( int a, int b){
    return a+b;
  }
  public double calcula( double a, double b){
     return a+b;
  }
   public String calcula( String a, String b){
     return a+b;
}


4. CRIE UM CODIGO QUE APRESENTE UMA RELAÇÃO DE COMPOSIÇÃO.

import java.io.*;
import java.util.*;
 
class Book {
 
    public String title;
    public String author;
 
    Book(String title, String author)
    {
        this.title = title;
        this.author = author;
    }
}
 
class Library {
 
    private final List<Book> books;
 
    Library(List<Book> books)
    {

        this.books = books;
    }
 
    public List<Book> getListOfBooksInLibrary()
    {
        return books;
    }
}
 
class GFG {
 
    public static void main(String[] args)
    {
        
        Book b1
            = new Book("EffectiveJ Java", "Joshua Bloch");
        Book b2
            = new Book("Thinking in Java", "Bruce Eckel");
        Book b3 = new Book("Java: The Complete Reference",
                           "Herbert Schildt");
 
        List<Book> book = new ArrayList<Book>();
 
        book.add(b1);
        book.add(b2);
        book.add(b3);
 
        Library library = new Library(book); 
       
        List<Book> books
            = library.getListOfBooksInLibrary(); 
       
        for (Book bk : books) {
           
            System.out.println("Title : " + bk.title
                               + " and "
                               + " Author : " + bk.author);
        }
    }
}


5. APRESENTE OS CÓDIGOS DOS EXERCÍCIOS ANTERIORES EM UM DIAGRAMA DE CLASSES DA UML.


1.




















